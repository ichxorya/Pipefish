def



(x float64) + (y float64) : builtin "add_floats"
(x string) + (y string) : builtin "add_strings"
(x list) + (y list) : builtin "add_lists"
(x set) + (y set) : builtin "add_sets"
(x int) + (y int) : builtin "add_integers"
(S struct) with (p pair) : builtin "add_pair_to_struct"
(L list) with (p pair) : builtin "add_pair_to_list"
(m map) with (p pair) : builtin "add_pair_to_map" 
(S struct) with (t tuple) : builtin "add_tuple_to_struct"
(L list) with (t tuple) : builtin "add_tuple_to_list"
(m map) with (t tuple) : builtin "add_tuple_to_map"
arity(x tuple) : builtin "arity_tuple"
codepoint(s string) : builtin "codepoint"
(x float64) / (y float64) : builtin "divide_floats"
(x int) / (y int) : builtin "divide_integers"
error(x string) : builtin "make_error"
float64(x int) : builtin "float_of_int"
float64(x string) : builtin "float_of_string"
(x float64) > (y float64) : builtin "gt_floats"
(x float64) >= (y float64) : builtin "gte_floats"
(x int) > (y int) : builtin "gt_ints"
(x int) >= (y int) : builtin "gte_ints"
int(x string) : builtin "int_of_string"
int(x float64) : builtin "int_of_float"
keys(M map): builtin "keys_of_map"
keys(S struct) : builtin "keys_of_struct"
keys(t type) : builtin "keys_of_type"
len(x list)	: builtin "len_list"
len(x map)	: builtin "len_map"
len(x set)	: builtin "len_set"
len(x string) : builtin "len_string"
len(t type) : builtin "len_type"
literal(s single) : builtin "literal"
literal(t tuple) : builtin "literal"
// The evaluator will change this at runtime to the appropriate long-form constructor.
(t type) with (T tuple) : builtin "long_form_constructor" 
(x float64) < (y float64) : builtin "lt_floats"
(x float64) <= (y float64) : builtin "lte_floats"
(x int) < (y int) : builtin "lt_ints"
(x int) <= (y int) : builtin "lte_ints"
(x single)::(y single) : builtin "make_pair"
map (t tuple) : builtin "map_of_tuple"
(m map) without (t tuple) : builtin "map_without_keys"
(x int) % (y int) : builtin "modulo_integers"
(x float64) * (y float64) : builtin "multiply_floats"
(x int) * (y int) : builtin "multiply_integers"
- (x float64) : builtin "negate_float"
- (x int) : builtin "negate_integer"
range(p pair) : builtin "range"
rune(i int) : builtin "rune"
set(T tuple) : builtin "set_of_tuple"
set(L list) : builtin "set_of_list"
(s single) in (L list) : builtin "single_in_list"
(s single) in (S set) : builtin "single_in_set"
(s single) in (T type) : builtin "single_in_type"
(s single) in (T tuple) : builtin "single_in_tuple"
string(x single) : builtin "string"
string(T tuple) : builtin "string"
(x float64) - (y float64) : builtin "subtract_floats"
(x int) - (y int) : builtin "subtract_integers"
tuple(t single) : builtin "tuple_of_single?"
tuple(t tuple) : builtin "tuple_of_tuple"
tuplify(L list) : builtin "tuplify_list"
tuplify(S set) : builtin "tuplify_set"
type(x single) : builtin "type"
type(x tuple) : builtin "type_of_tuple"

def

f = func(x int) : x + 1